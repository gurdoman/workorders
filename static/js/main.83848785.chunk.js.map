{"version":3,"sources":["components/filter/Filter.js","components/Api/Api.js","components/orders/WorkOrder.js","components/orders/WorkOrders.js","App.js","serviceWorker.js","index.js"],"names":["Filter","state","filter","order","onFilterChange","e","setState","target","value","props","filterByWorkerName","onOrderChange","checked","orderByDate","Form","Row","Control","type","name","placeholder","onChange","this","id","className","Label","Switch","label","Component","axios","create","baseURL","WorkOrder","worker","companyName","email","image","description","orderName","deadline","Date","toLocaleString","Col","xs","sm","md","lg","Card","Header","Body","Image","src","roundedCircle","Title","Text","Footer","WorkOrders","orders","workers","Api","get","then","res","console","log","data","workerIds","promises","forEach","element","undefined","workerId","push","Promise","all","catch","err","sort","a","b","toUpperCase","includes","length","map","key","Alert","variant","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83848785.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Filter.css';\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nexport default class Filter extends Component {\r\n\r\n  state = {\r\n    filter : '',\r\n    order : 'EARLIEST'\r\n  }\r\n  \r\n  onFilterChange = (e) => {\r\n    this.setState({filter: e.target.value})\r\n    this.props.filterByWorkerName(e.target.value);\r\n  }\r\n\r\n  onOrderChange = (e) => {\r\n    let order = e.target.checked ? 'LATEST' : 'EARLIEST'\r\n    this.setState({order})\r\n    this.props.orderByDate(order);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <Form>\r\n        <Form.Row>\r\n          <Form.Control \r\n            type=\"text\" \r\n            name=\"filter\"\r\n            placeholder=\"Filter by worker name...\" \r\n            onChange={this.onFilterChange}\r\n            value={this.state.filter}\r\n            id=\"name-input\"\r\n          />\r\n        </Form.Row>\r\n        <Form.Row className=\"toggle\">\r\n          <Form.Label className=\"toggle_label\">Earliest first</Form.Label>\r\n          <Form.Switch\r\n            id=\"deadline-input\"\r\n            onChange={this.onOrderChange}\r\n            label=\"Latest first\"\r\n          />\r\n        </Form.Row>\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\nconst url = \"https://rossino-work-orders.herokuapp.com/\";\r\nexport default axios.create({baseURL: url})","import React, { Component } from 'react'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Image from 'react-bootstrap/Image'\r\n\r\nexport default class WorkOrder extends Component {\r\n  render() {\r\n    const { companyName, email, image, name } = this.props.worker;\r\n    let description = this.props.order.description,\r\n    orderName = this.props.order.name,\r\n    deadline = new Date(this.props.order.deadline * 1000);\r\n    deadline = deadline.toLocaleString()\r\n    return (\r\n      <Col xs={12} sm={12} md={6} lg={4}>\r\n        <Card className=\"deadline-card\">\r\n          <Card.Header>{orderName}</Card.Header>\r\n          <Card.Body>{description}</Card.Body>\r\n          <Row>\r\n            <Col xs={5} md={5}>\r\n              <Image src={image} roundedCircle className=\"worker-image\"></Image>\r\n            </Col>\r\n            <Col xs={7} md={7}>\r\n              <Card.Title>{name}</Card.Title>\r\n              <Card.Text>{companyName}</Card.Text>\r\n              <Card.Text>\r\n                <small>{email}</small>\r\n              </Card.Text>\r\n            </Col>\r\n          </Row>\r\n          <Card.Footer>\r\n            <small className=\"text-muted\">{deadline}</small>\r\n          </Card.Footer>\r\n        </Card>\r\n      </Col>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './WorkOrders.css';\r\nimport Api from '../Api/Api'\r\nimport WorkOrder from './WorkOrder';\r\nimport Alert from 'react-bootstrap/Alert'\r\n\r\nexport default class WorkOrders extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      orders : [],\r\n      filter : '',\r\n      workers : []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    Api.get('work_orders')\r\n      .then(res =>{\r\n        console.log(res)\r\n        let orders = res.data,\r\n        workers = this.state.workers,\r\n        workerIds = {}, \r\n        promises = [];\r\n        orders.forEach(element => {\r\n          if(workers[element.workerId] === undefined && workerIds[element.workerId] === undefined){\r\n            promises.push(Api.get(`workers/${element.workerId}`))\r\n            workerIds[element.workerId] = element.workerId;\r\n          }\r\n        });\r\n        Promise.all(promises)\r\n        .then(res =>{\r\n          let workers = []\r\n          res.forEach(worker =>{\r\n            workers[worker.data.id] = worker.data;\r\n          })\r\n          this.setState({\r\n            orders,\r\n            workers\r\n          })\r\n        })\r\n        .catch(err => {\r\n          console.log(`There was a problem fetching the workers: ${err}`);\r\n        })\r\n      })\r\n      .catch(err => {\r\n        console.log(`There was a problem fetching the orders: ${err}`);\r\n      })\r\n  }\r\n\r\n\r\n  render() {\r\n    let orders = this.state.orders.sort((a,b) => { \r\n      if(this.props.order === 'EARLIEST') return a.deadline - b.deadline\r\n      else return b.deadline - a.deadline\r\n    })\r\n    .filter(order => \r\n      this.state.workers[order.workerId].name.toUpperCase().includes(this.props.filter.toUpperCase())\r\n    );\r\n\r\n    return (\r\n        orders.length > 0 ? \r\n          orders.map( order => \r\n          <WorkOrder \r\n            order={order}\r\n            worker={this.state.workers[order.workerId]}\r\n            key={order.id}\r\n          />  )\r\n        :\r\n          <Alert variant=\"danger\">\r\n            No work order matches your search criteria, please try with another name\r\n          </Alert>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Filter from './components/filter/Filter';\nimport WorkOrders from './components/orders/WorkOrders';\n\n\nexport default class App extends Component {\n\n  constructor(){\n    super();\n\n    this.state = {\n      filter : '',\n      order : 'EARLIEST'\n    }\n  }\n\n  filterByWorkerName = (filter) =>{\n    this.setState({filter})\n  }\n\n  orderByDate = (order) => {\n    this.setState({order})\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <Filter \n              filterByWorkerName={this.filterByWorkerName}\n              orderByDate={this.orderByDate}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <WorkOrders \n            filter={this.state.filter}\n            order={this.state.order}\n          />\n        </Row>\n      </Container>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}